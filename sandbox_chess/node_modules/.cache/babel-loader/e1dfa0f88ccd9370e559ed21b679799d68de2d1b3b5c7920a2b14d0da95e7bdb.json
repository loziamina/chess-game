{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lozia\\\\exochess\\\\chess-game\\\\sandbox_chess\\\\src\\\\components\\\\Chessboard.jsx\",\n  _s = $RefreshSig$();\n/* eslint-disable max-lines-per-function */\nimport React, { useState } from \"react\";\nimport Tile from \"./Tile\";\nimport { pieceImages } from \"./pieces\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chessboard = () => {\n  _s();\n  const initialBoard = [[\"bR\", \"bKn\", \"bB\", \"bQ\", \"bK\", \"bB\", \"bKn\", \"bR\"], [\"bP\", \"bP\", \"bP\", \"bP\", \"bP\", \"bP\", \"bP\", \"bP\"], [null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null], [\"wP\", \"wP\", \"wP\", \"wP\", \"wP\", \"wP\", \"wP\", \"wP\"], [\"wR\", \"wKn\", \"wB\", \"wQ\", \"wK\", \"wB\", \"wKn\", \"wR\"]];\n  const [board, setBoard] = useState(initialBoard);\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  function handleMove(start, destination) {\n    const newBoard = [...board];\n    const {\n      row: startRow,\n      col: startCol\n    } = start;\n    const {\n      row: destRow,\n      col: destCol\n    } = destination;\n    const isDestinationEmpty = newBoard[destRow][destCol] === null;\n    const isEnemyPiece = newBoard[destRow][destCol] && newBoard[destRow][destCol][0] !== selectedPiece[0];\n    if ((isDestinationEmpty || isEnemyPiece) && isValidMove(start, destination)) {\n      newBoard[destRow][destCol] = selectedPiece;\n      newBoard[startRow][startCol] = null;\n      setBoard(newBoard);\n      setSelectedPiece(null);\n    } else {\n      setSelectedPiece(null);\n    }\n  }\n\n  // eslint-disable-next-line complexity\n  function isValidMove(start, destination, piece) {\n    const {\n      row: startRow,\n      col: startCol\n    } = start;\n    const {\n      row: destRow,\n      col: destCol\n    } = destination;\n    if (destRow < 0 || destRow >= 8 || destCol < 0 || destCol >= 8) {\n      return false;\n    }\n    const rowDiff = Math.abs(destRow - startRow);\n    const colDiff = Math.abs(destCol - startCol);\n    switch (piece[1]) {\n      case \"R\":\n        return rowDiff === 0 || colDiff === 0;\n      case \"Kn\":\n        return rowDiff === 2 && colDiff === 1 || rowDiff === 1 && colDiff === 2;\n      case \"B\":\n        return rowDiff === colDiff;\n      case \"Q\":\n        return rowDiff === 0 || colDiff === 0 || rowDiff === colDiff;\n      case \"K\":\n        return rowDiff <= 1 && colDiff <= 1;\n      case \"P\":\n        // Ajoutez ici la logique spécifique pour le déplacement du pion (avancer, prendre en diagonale, etc.)\n        // Ceci est un exemple de déplacement vers l'avant d'une case.\n        // Vous devrez adapter cela pour gérer les premiers mouvements, les captures en diagonale, etc.\n        // eslint-disable-next-line no-case-declarations\n        const direction = piece[0] === \"w\" ? 1 : -1;\n        return destCol === startCol && destRow === startRow + direction || false;\n      default:\n        return false;\n    }\n  }\n  const chessboard = board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board-row\",\n    children: row.map((piece, colIndex) => /*#__PURE__*/_jsxDEV(Square, {\n      piece: piece,\n      onSquareClick: () => {\n        if (piece && (!selectedPiece || piece[0] === selectedPiece[0])) {\n          setSelectedPiece(piece);\n        } else if (selectedPiece) {\n          handleMove({\n            row: rowIndex,\n            col: colIndex\n          }, {\n            row: rowIndex,\n            col: colIndex\n          });\n        }\n      }\n    }, \"\".concat(rowIndex, \"-\").concat(colIndex), false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this))\n  }, rowIndex, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chessboard\",\n    children: chessboard\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 11\n  }, this);\n};\n_s(Chessboard, \"JB+ED5ui4mMR887f+G2lhtTIsgg=\");\n_c = Chessboard;\nexport default Chessboard;\nvar _c;\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"names":["React","useState","Tile","pieceImages","jsxDEV","_jsxDEV","Chessboard","_s","initialBoard","board","setBoard","selectedPiece","setSelectedPiece","handleMove","start","destination","newBoard","row","startRow","col","startCol","destRow","destCol","isDestinationEmpty","isEnemyPiece","isValidMove","piece","rowDiff","Math","abs","colDiff","direction","chessboard","map","rowIndex","className","children","colIndex","Square","onSquareClick","concat","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/lozia/exochess/chess-game/sandbox_chess/src/components/Chessboard.jsx"],"sourcesContent":["/* eslint-disable max-lines-per-function */\nimport React, { useState } from \"react\"\nimport Tile from \"./Tile\"\nimport { pieceImages } from \"./pieces\"\n\nconst Chessboard = () => {\n  const initialBoard = [\n    [\"bR\", \"bKn\", \"bB\", \"bQ\", \"bK\", \"bB\", \"bKn\", \"bR\"],\n    [\"bP\", \"bP\", \"bP\", \"bP\", \"bP\", \"bP\", \"bP\", \"bP\"],\n    [null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null],\n    [\"wP\", \"wP\", \"wP\", \"wP\", \"wP\", \"wP\", \"wP\", \"wP\"],\n    [\"wR\", \"wKn\", \"wB\", \"wQ\", \"wK\", \"wB\", \"wKn\", \"wR\"]\n  ]\n  const [board, setBoard] = useState(initialBoard)\n  const [selectedPiece, setSelectedPiece] = useState(null)\n\nfunction handleMove(start, destination) {\n  const newBoard = [...board]\n  const { row: startRow, col: startCol } = start\n  const { row: destRow, col: destCol } = destination\n  const isDestinationEmpty = newBoard[destRow][destCol] === null\n  const isEnemyPiece = newBoard[destRow][destCol] && newBoard[destRow][destCol][0] !== selectedPiece[0]\n\n  if ((isDestinationEmpty || isEnemyPiece) && isValidMove(start, destination)) {\n    newBoard[destRow][destCol] = selectedPiece\n    newBoard[startRow][startCol] = null\n    setBoard(newBoard)\n    setSelectedPiece(null)\n  } else {\n    setSelectedPiece(null)\n  }\n}\n\n// eslint-disable-next-line complexity\nfunction isValidMove(start, destination, piece) {\n  const { row: startRow, col: startCol } = start\n  const { row: destRow, col: destCol } = destination\n\n  if (destRow < 0 || destRow >= 8 || destCol < 0 || destCol >= 8) {\n    return false\n  }\n\n  const rowDiff = Math.abs(destRow - startRow)\n  const colDiff = Math.abs(destCol - startCol)\n\nswitch (piece[1]) {\n    case \"R\": \n      return rowDiff === 0 || colDiff === 0\n\n    case \"Kn\": \n      return (rowDiff === 2 && colDiff === 1) || (rowDiff === 1 && colDiff === 2)\n\n    case \"B\": \n      return rowDiff === colDiff\n\n    case \"Q\": \n      return rowDiff === 0 || colDiff === 0 || rowDiff === colDiff\n\n    case \"K\": \n      return rowDiff <= 1 && colDiff <= 1\n\n   \n    case \"P\": \n      // Ajoutez ici la logique spécifique pour le déplacement du pion (avancer, prendre en diagonale, etc.)\n      // Ceci est un exemple de déplacement vers l'avant d'une case.\n      // Vous devrez adapter cela pour gérer les premiers mouvements, les captures en diagonale, etc.\n      // eslint-disable-next-line no-case-declarations\n      const direction = piece[0] === \"w\" ? 1 : -1\n\n      return (\n        (destCol === startCol && destRow === startRow + direction) ||\n        false\n      )\n\n    default:\n      return false\n  }\n}\n  const chessboard = board.map((row, rowIndex) => (\n    <div key={rowIndex} className=\"board-row\">\n      {row.map((piece, colIndex) => (\n        <Square\n          key={`${rowIndex}-${colIndex}`}\n          piece={piece}\n          onSquareClick={() => {\n            if (piece && (!selectedPiece || piece[0] === selectedPiece[0])) {\n              setSelectedPiece(piece);\n            } else if (selectedPiece) {\n              handleMove({ row: rowIndex, col: colIndex }, { row: rowIndex, col: colIndex });\n            }\n          }}\n        />\n      ))}\n    </div>\n  ))\n\n   return <div className=\"chessboard\">{chessboard}</div>\n}\n\nexport default Chessboard"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}